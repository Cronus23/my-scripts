#!/bin/bash
#title           :fileinspector3.sh
#description     :This script will set files extension properly according to the 
#		  mime type.
#author		 :Wendi Tang
#date            :2014/5/31
#version         :1.3    
#usage		 :bash fileinspector3.sh [file name] [directory name]
#bash_version    :4.1.5(1)-release
#==============================================================================

cleanUp()
{
	if [[ -z $1 ]]
	then
	 	logger "fileinspector4.sh failed."
	else
		logger "fileinspector4.sh successed."
	fi
	if [[ ! -z $TEMPFILE ]]
	then
		rm $TEMPFILE
	fi
	trap - EXIT
	exit
}
getOptions()
{
        while getopts "a:l:f:vd" opt; do
                case "$opt" in
                        l) logFile=$OPTARG ;;
                        f) fileTable=$OPTARG ;;
                        v) verbose=1 ;;
                        d) set -x ;;
                        \?) echo "Invalid option: -$OPTARG" >&2
			    cleanUp;;
                esac
        done
	shiftCount=$(($OPTIND - 1))
}


setup()
{
	#declare -A  aa
	TEMPFILE="$(mktemp)"
	if [[ -z $logFile ]]
	then
		logFile="log_fileinspector.txt"
	fi
	date >> $logFile
	if [[ -z $fileTable ]]
	then
		fileTable="/root/bin/filetable.txt"
	fi
	echo "Program is setting up"
	IFS=$(echo -en "\n\b")
}

syntax()
{
	echo "syntax: fileinspector2.sh [-d : debug mode] [-v : verbose mode][-l filename : log the information to the file provided ][-f filename : use the file table from the provided file ] [FileName]/[Directory]"
}
error_message()
{
	echo "File or directory does not exsit">&2
	cleanUp
}

message()
{
	#echo "Message here"
	echo ${1##*/}" has been renamed to "${2##*/}
	echo "The file type for "${1##*/}" is "$3
}

rename_file()
{
	if [[ -f $1 ]]
	then
		temp=$(file --mime-type -b $1)
        	if [[ $1 != ${1%.*}.${aa[$temp]} ]]
        	then
                	cp $1 ${1%.*}.${aa[$temp]}
			if [[ $verbose == 1 ]]
			then
				message $1 ${1%.*}.${aa[$temp]} $temp
			fi
			message $1 ${1%.*}.${aa[$temp]} $temp >> $logFile
                	rm $1
        	fi
	elif [[ -d $1 ]]
	then
		for file in $1/*; do
                        rename_file $file
                done
	else
		error_message
	fi

}

read_in_file_extension_pairs()
{
	for i in $(<$fileTable)
	do
        	if [[ $i == *#@#* ]]
        	then
                	aa[${i%#@#*}]=${i#*#@#}
        	fi

	done
}

trap cleanUp SIGKILL SIGINT EXIT
getOptions $@
shift $shiftCount
setup
declare -A  aa
read_in_file_extension_pairs

for var in "$@"
do
	if [[ -f $var ]]
	then
        	rename_file $var
	elif [[ -d $var ]]
	then
        	for file in $var/*; do
                	rename_file $file
        	done
	else
        	syntax
        	error_message
	fi

done
cleanUp 1
